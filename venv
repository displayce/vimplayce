#!/bin/sh
# 
# Script used to create a virtual environment for this neovim
# configuration.
# All files created by neovim while in development mode (runtime, swap, etc...)
# can be find in the dev folder.

usage () {
    cat <<HELP
usage: ./venv [OPTION]...

    OPTION:
	    --state=STATE
		    STATE neovim directory. See XDG_STATE_HOME in neovim man page.

	    --data=DATA
		    DATA neovim directory. See XDG_DATA_HOME in neovim man page.

	    --config=CONFIG
		    CONFIG neovim directory. See XDG_CONFIG_HOME in neovim man page.

	    --shell=SHELL
		    SHELL will be launched instead of \$SHELL.

	    --ps1=FMT
		    Set PS1 env in virtual shell to FMT.

	    -h, --help
		    Show this help message.
HELP
}

setoption () {
    OPTION=$1
    VALUE=$2
    case $OPTION in
	'-h'|'--help')
	    usage
	    exit 0
	    ;;

	'--ps1')
	    PS1=$VALUE
	    ;;

	'--shell')
	    CUSTOM_SHELL=$VALUE
	    ;;

	'--config')
	    XDG_CONFIG_HOME=$VALUE
	    ;;

	'--state')
	    XDG_STATE_HOME=$VALUE
	    ;;

	'--data')
	    XDG_DATA_HOME=$VALUE
	    ;;

	'*')
	    echo "option $1 is not valid."
	    usage
	    exit 1
	    ;;
    esac
}

export PS1="(nvim) [\u@\W] $ "
export XDG_CONFIG_HOME="$(pwd)"
export XDG_STATE_HOME="$(pwd)/dev/state"
export XDG_DATA_HOME="$(pwd)/dev/share"
export CUSTOM_SHELL=$SHELL

# Parse options
while [ "$#" -gt 0 ]; do
    # removing possible value from the option
    OPTION=${1%=*}
    VALUE=${1#*=}
    if [ "$VALUE" = "$OPTION" ] && [ -n "$2" ] && [ "${2:0:1}" != '-' ]; then
		VALUE=$2
		shift
    fi

    setoption $OPTION $VALUE
    shift
done

# Start the virtual shell for neovim testing
$CUSTOM_SHELL || echo "invalid shell"
